<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | Xio's Life]]></title>
  <link href="http://ouxio.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://ouxio.github.io/"/>
  <updated>2016-07-20T15:31:06+08:00</updated>
  <id>http://ouxio.github.io/</id>
  <author>
    <name><![CDATA[Xio]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress下新建单页面与博客]]></title>
    <link href="http://ouxio.github.io/blog/2016/07/20/handle-octopress/"/>
    <updated>2016-07-20T13:56:26+08:00</updated>
    <id>http://ouxio.github.io/blog/2016/07/20/handle-octopress</id>
    <content type="html"><![CDATA[<h2><font color="#008000">#</font> Octopress的一些基本操作</h2>

<h3>1. 提高加载速度</h3>

<p>　　上一篇中提出，为什么只是一个静态的网页，在没有大量的图片、视频资源，也不用访问数据库的情况下需要加载这么长时间。打开浏览器，按<code>F12</code>打开控制台，点击Network观察加载数据。</p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/preview.png" alt="preview" /></p>

<p>查看后终于发现罪魁祸首，原来就是这个jquery文件，加载了足足21秒，21秒可以干什么？国足都可以拿下一球了。知道了问题的根源后，就要去解决问题。在octopress框架下，主要操作的就是source文件夹。在<code>octopress\source\_includes</code>文件夹下找到<code>head.html</code>文件打开，在25行位置发现jquery的在线加载路径，一看是google..不由感叹，真是万里长城永不倒呀。修改为可加载的路径。可以修改到国内的，比如百度，或者jquery官网的：<code>//code.jquery.com/jquery-1.9.1.min.js</code>。为了避免不必要的问题，jquery的版本最好也是1.9.1的。</p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/changeJquery.png" alt="change_jquery" /></p>

<p>然后再执行<code>rake generate</code>重新生成网页，记住，每次修改过文件最好都重新生成网页文件。再通过<code>rake preview</code>预览，这次会发现加载远远比第一次要快得多。</p>

<h3>2.新建单页面</h3>

<p>　　在新建博客之前，先来认识下单页面。单页面可以理解为在导航栏中的一个导航，比如"关于"等其他页面，它不是博客。通过</p>

<p><code>rake new_page['pageName']</code></p>

<p>来创建一个新的单页面。其中pageName不能包含中文、特殊符号，尽量也不要空格。执行完命令后，在<code>octopress\source</code>文件夹下会新生成一个文件夹，文件夹的名字就是你的命令中的pageName，其中里面只包含一个<code>index.markdown</code>的文件。这个markdown文件怎么编写，和博客网页又有什么关系呢，下面会说明。</p>

<h3>3. 新建博客</h3>

<p>　　搭建完环境后，怎么能让博客空空如也呢，当然是满怀期待地想要写下自己第一篇博客啦。通过</p>

<p><code>rake new_post['titleName']</code></p>

<p>命令来建立博客，其中titleName不能包含中文、特殊符号，尽量也不要空格。执行完这条命令后，在<code>octopress/source/_post</code>文件夹下会生成一个<code>titleName.markdown</code>的文件，这个markdown文件需要用markdown语法来编写。采用markdown体现了octopress框架的设计理念，它想使用者纯文本编写博客，包括图片、视频等资源都可以用文本生成，让我们注重博客的内容，而不是排版等问题，提高博客的质量。</p>

<h2><font color="#008000">#</font> 编写MarkDown</h2>

<p>　　markdown文件本身可以用编辑器(Editplus或者Nodepad++都可以)打开编辑，也可以用上篇博客中提供的安装包中的markdownpad打开，这款markdownpad的优点就是可以实时预览效果，安装就不再多说了，win10的用户安装完后打开编辑可能会出bug，此时再安装工具包中的awesomium_sdk就行了。打开markdown文件可以看到一些初始化信息，这些信息可以再手动更改，尽量不要删除。</p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/markdownaction.png" alt="markdownfirst" /></p>

<p>　　解析一下，其中layout是生成这个网页文件时采取什么布局，这里默认是post，因为我们就是新建的博客，如果是单页面，那么这里就是page。title默认是命令新建博客时的titleName，开始提过不能设置中文是因为后期会根据titleName来决定访问路径，而此时在markdown文件的title是可以修改成自己博客的标题的。date就是生成博客的时间，尽量按照默认的格式不要改。还有就是comments为true，设置允许评论，博客时默认true，而单页面默认是false，也就是不允许评论。categories是这篇博客的分类，可以允许设置多个分类，只要分类之间用逗号分隔开就行。</p>

<p>　　了解初始化信息后，可以在下面编写博客的内容。关于markdown语法可以查看这里<a href="https://www.zybuluo.com/AntLog/note/63228">https://www.zybuluo.com/AntLog/note/63228</a> 的一篇博客学习,学过html的人几分钟就可以上手。</p>

<p>　　作为程序猿还是特别说明处理代码块的问题，首先插入代码的语法有三种：</p>

<pre><code>    void hello(){
        printf("hello world");
    }
</code></pre>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/onef.png" alt="one" /></p>

<p>第一，在每一行的开始按一下Tab键，然后输入代码。优点是快速方便，缺点是不支持语法高亮和代码行数，这对程序猿来说无疑是致命打击。</p>

<pre><code>```c This is a c http://www.baidu.com link
    void hello(){
        printf("hello world");
    }
```
</code></pre>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/two.png" alt="two" /></p>

<p>第二，用上下三个反引号(英文状态下Esc下面一个的按键)包含住代码。可以在开始的三个反引号后指定语言，代码标题和链接。相对上面一种的优点是不用Tab键，它不仅支持显示代码行数，而且还支持语法高亮。</p>

<pre><code class="c"><figure class='code'><figcaption><span>This is a c</span><a href='http://www.baidu.com'>link </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="kt">void</span> <span class="nf">hello</span> <span class="p">(){</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/two.png" alt="three" /></p>

<p>第三种，写法上和第二种不一样。用一对大括号后跟百分号组成包含代码的开始标签，开始标签内可以设置语言类型以及标题等，以一对大括号后跟百分号组成结束标签。它的效果和第二种是相同的。</p>

<p>在编写完markdown文件后，想要在浏览器上看到效果，必须先用<code>rake generate</code>重新生成网页，再<code>rake preview</code>进行预览。还需提醒的是，虽然markdown代码本身像html一样，对于错误不敏感。但是当我们用<code>rake generate</code>生成网页时，一旦出现语法错误，那么生成网页就会失败，访问时也会出现空白页。可能你在以上使用这第二方法处理代码，进行浏览器预览时就出现空白页，并且gitbash中会提示404的错误。如下：</p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/twofile.png" alt="twofile" /></p>

<p>在使用第三种方法处理代码时，在生成网页文件时gitbash中提示错误，并且预览时也是一片空白。如下：</p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/threefile.png" alt="threefile" /></p>

<p>作为一个程序猿，如果代码不能高亮，那么要这个博客还有何用？其实这也是大坑之一，我不知道这是版本原因还是国内下载时的网络原因，在安装后实际上是缺少了<code>Pygments</code>这款提供代码高亮的组件，所以我们要手动添加上去。</p>

<h3>1.安装Python</h3>

<p>　　安装Python相对比较简单，只需要一直按next就行了。安装时注意下安装路径，因为安装完成后，还需要添加环境变量。具体如下：</p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/py01.png" alt="py01" /></p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/py02.png" alt="py01" /></p>

<p>安装后还要添加环境变量，鼠标右击"我的电脑"->属性->高级系统设置->环境变量，然后在系统变量中找到Path，双击进入编辑，再把Python的安装路径添加上去就行。</p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/py03.png" alt="py01" /></p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/py04.png" alt="py01" /></p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/py05.png" alt="py01" /></p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/py06.png" alt="py01" /></p>

<p>添加环境变量时对于win10来说还是不容易出错的，只需要把安装路径增加上去即可。但是windowns其他版本添加环境变量时建议在Path的末尾添加路径，比如 <code>;C:\Python27</code>，每个路径前都是有一个英文状态下的分号<code>;</code>的。想知道安装、添加环境变量成功没，可以<code>win+R</code>打开CMD，输入</p>

<p><code>python -V</code></p>

<p>若输出python的版本号即为成功。</p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/py07.png" alt="py07" /></p>

<h3>2.安装pip工具</h3>

<p> 　　网上很多资料都说使用 <code>easy_install</code> 安装<code>Pygments</code>，但那种方法已经过时，<code>pip</code>早已成为<code>easy_install</code>的替代品。从 <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip">http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip</a>下载pip最新的安装文件 <code>pip-8.1.2-py2.py3-none-any.whl</code>（在我提供的安装包中也有） ，放在Python根目录中。打开cmd窗口，进入到Python的目录下，执行</p>

<p><code>python pip-8.1.2-py2.py3-none-any.whl/pip install pip-8.1.2-py2.py3-none-any.whl</code></p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/pipinstall.png" alt="pipinstall" /></p>

<p>安装后会在Python的目录下新生成一个Scripts的文件夹，里面是一些Python的工具集，其中就有刚安装的pip工具。进入到Scripts文件夹，执行</p>

<p><code>pip --version</code></p>

<p>输入pip的版本号即为安装成功。</p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/pipsuccess.png" alt="pipsuccess" /></p>

<h3>3.安装pygments</h3>

<p>　　安装完pip安装工具后就可以很轻松的安装pygments。打开CMD，依旧是进入到Python\Scripts文件夹下，执行</p>

<p><code>pip install Pygments</code></p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/pygmentsinstall.png" alt="pygmentsinstall" /></p>

<p>等待安装完后，再使用以上提到的第二、三种方法处理代码时就可以看到效果啦~</p>

<h2><font color="#008000">#</font> 一些建议</h2>

<p>　　在新建博客或者单页面时，实际上是先生成markdown文件，再通过<code>rake generate</code>命令才生成的网页文件，这是两个独立的过程。还记得刚开始介绍octopress时说，这是一个静态化博客系统，也就是说它本身没有数据库，也没有数据交换。所以我们尽量把图片、视频等资源托管到云存储中，然后对这些资源生成一个外链，在编写markdown时直接引用这个外链即可，以减轻博客服务器的压力。国内类似的云存储有七牛、又拍云等，不仅操作简单而且稳定。我没有收到一分钱广告费&hellip;下一篇将讲解如何给博客添加社会化分享以及评论功能。</p>

<p>如果有错，或者有问题的欢迎在下方评论提出，谢谢。</p>

<hr />

<h3>在此要感谢以下博客提供参考：</h3>

<p><a href="http://lutaf.com/markdown-simple-usage.htm">http://lutaf.com/markdown-simple-usage.htm</a>
<a href="http://blog.csdn.net/kong5090041/article/details/38408211">http://blog.csdn.net/kong5090041/article/details/38408211</a>
<a href="http://pygments.org/">http://pygments.org/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建octopress环境]]></title>
    <link href="http://ouxio.github.io/blog/2016/07/19/build-octopress/"/>
    <updated>2016-07-19T13:39:42+08:00</updated>
    <id>http://ouxio.github.io/blog/2016/07/19/build-octopress</id>
    <content type="html"><![CDATA[<h2><font color="#008000">#</font> Octopress介绍</h2>

<p>　　Octopress是一个基于Ruby的开源Blogging Framework，它不仅是一款优秀的静态化博客系统，也是一个本地化的博客系统。主要的优点如下：</p>

<ol>
<li>命令行操作</li>
<li>纯文本写博客（图片，视频等）</li>
<li>定制性高</li>
<li>纯静态</li>
<li>结合github的版本化管理</li>
<li>迁移成本低</li>
<li>简洁的Ruby框架</li>
<li>使用Markdown语法</li>
</ol>


<h3>工作流程与目录结构</h3>

<p>　　在下载安装完之后我们主要用到的几个文件夹为<code>source</code>和<code>public</code>，我们的源文件会存储在<code>source</code>文件夹下，然后通过<code>generate</code>命令生成静态的博客网页文件，存储在<code>public</code>文件夹下。这也是我们的一个工作流程。我们先有这样一个概念，往下会教怎么安装octopress。
<img src="http://7xwg81.com1.z0.glb.clouddn.com/octopress_01.png" alt="目录结构" /></p>

<h2><font color="#008000">#</font> 搭建环境</h2>

<p>　　由刚才的介绍可以知道，octopress是基于Ruby的一个框架，所以首先需要搭建Ruby的环境，但是由于国内某些原因（你懂的），使得搭建整个环境变得非常繁琐，甚至失败，所以我提供了搭建octopress所需要的所有工具安装包(只有64位的，32位的臣妾办不到呀)，下载链接在博客最下方，有需要的可以下载使用。</p>

<h3>1.安装git</h3>

<p>如果你的电脑已经有git的话就不用安装了，这里用的是1.9版本。打开<code>Git-1.9.5-preview20150319.exe</code>，选择路径，其余的步骤默认安装就好。关于git的安装百度一大把，这里不再详细说明。</p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/git03.png" alt="git_03" /></p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/git04.png" alt="git_04" /></p>

<p>安装完后，鼠标右键桌面空白地方，可以看到Git Bash..Git GUI什么的就是安装成功。</p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/gitbase.png" alt="git_success" /></p>

<h3>2.安装Ruby</h3>

<p>在下载完解压后，打开Ruby的安装程序<code>rubyinstaller-2.1.3-x64.exe</code>，选择路径，需要提下的是，在安装过程第二步中，必须要勾选第二个，把Ruby添加到系统路径中去。</p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/ruvy02.png" alt="ruby_02" /></p>

<p>安装Ruby还是相对简单的，接着就是安装DevKit。</p>

<h3>3.安装DevKit</h3>

<p>打开<code>DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe</code>程序，其实就是一个压缩包，打开解压到自己的路径下，时间有点久，耐心等候一下。</p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/devkit01.png" alt="devkit_01" /></p>

<h3>4.连接DevKit与Ruby之间关系</h3>

<p>　　进入到DevKit文件夹下（注意必须是DevKit的安装目录下，因为我是安装在E：\DevKit下的，目录看自己定），鼠标右键打开Git Bash，输入</p>

<p><code>ruby dk.rb init</code></p>

<p>初始化dk.rb文件。执行完后，在操作目录下会生成一个<code>config.yml</code>的文件。用编辑器（Editplus或者Nodepad++都可以）打开确认Ruby的安装路径是否在文件末尾，如果没有就按这种格式<code>- E:/Ruby21-x64</code> 手动添加上去，注意一下格式。减号与路径之间有一个空格，如果是直接复制文件夹路径的，需要把反斜杠<code>\</code>改成斜杠<code>/</code>，比如<code>E:\Ruby21-x64</code>改成<code>E:/Ruby21-x64</code>，这也是一大坑之一。</p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/config.png" alt="config" /></p>

<p>确认Ruby的路径正确后，回到GitBash上，继续输入</p>

<p><code>ruby dk.rb install</code></p>

<p>执行安装。整个执行过程如下：</p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/ruby_devkit.png" alt="ruby_devkit" /></p>

<p>输出以上的<code>[INFO]</code>信息即为成功，如果输出其他乱七八糟的东西大多数是因为<code>cofig.yml</code>文件里面的Ruby路径出错，请仔细检查。</p>

<h3>5.安装Octopress</h3>

<p>　　这下进入正题，终于来到安装octopress这块了，如果把这一步安装成功，可以说整个安装环境就完成了一半。</p>

<p>　　打开<a href="http://octopress.org/">Octopress</a>的官网，拉到最下面，然后点击<code>start here</code>，里面有octopress的安装教程，嫌麻烦也可以直接看这。</p>

<p>　　首先打开一个盘符，尽量不要在C盘，可以D盘或者E盘等，鼠标右键继续打开GitBash。输入</p>

<p><code>git clone git://github.com/imathis/octopress.git octopress</code></p>

<p>把octopress克隆到我们的盘符下，稍等片刻。克隆成功后，就会在我们的操作目录下生成一个octopress文件夹。我们在GitBash上继续输入</p>

<p><code>cd octopress</code></p>

<p>进入到该目录，然后输入</p>

<p><code>gem sources -a http://gems.ruby-china.org</code></p>

<p>把gem的镜像源修改成国内的，注意这里的<code>http://gems.ruby-china.org</code>一定不能写错，没有<code>www.</code>，也不是<code>https</code>协议！我们再把gem默认的镜像源删掉，输入</p>

<p><code>gem sources -r https://rubygems.org/</code></p>

<p>这里的路径也不能写错。最后为了安全起见，输入<code>gem sources -l</code>查看源列表，确认只有一条<code>http://gems.ruby-china.org</code>镜像源。</p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/gem_sources.png" alt="gem_sources" /></p>

<p>修改完上面之后，还需要在octopress文件夹内找到并打开Gemfile文件，在第一行修改镜像源路径为<code>http://gems.ruby-china.org</code>，如下：</p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/Gemfile.png" alt="Gemfile" /></p>

<p>确认无误后，继续输入</p>

<p><code>gem install bundler</code></p>

<p>来安装bundler，输入命令后也许会出现一些怪异的现象(比如gitbash无响应了)，不要怀疑，相信自己是对的(然而笔者我ctrl+c停止执行，傻傻地去找无响应的原因了..)。原因上面说了，因为国内某些原因，视网络环境而定等待的时间偏长。安装完成后。继续输入</p>

<p><code>bundle install</code></p>

<p>来安装我们需要的工具，这里要注意，不要自以为是把<code>bundle</code>写成<code>bundler</code>（是的，说的就是我），这里安装的时间也偏长，这段时间可以去喝杯咖啡压压惊。</p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/Bundle_install.png" alt="Bundle_install" /></p>

<p>　　这里说下题外话，因为octopress是基于jekyll的(jekyll也是一个博客框架)，所以会安装jekyll的一些组件，还有就是sass是用来生成css样式文件的。感兴趣的可以再去了解。</p>

<p>　　以上都安装完后，环境就差不多了。我们一开始在介绍octopress时提到过，通过<code>rake generate</code>会在octopress\public的文件夹内生成博客网页。那我们就用<code>rake generate</code>命令测试下，有的可能会提示rake未安装，那么就先输入<code>rake install</code>安装一下，再执行以上命令。</p>

<p><code>rake install</code></p>

<p><code>rake generate</code></p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/generate_install.png" alt="generate_install" />
　　生成后，你也行会迫不及待地打开一个index.html文件查看，但不幸的告诉你并不是这样查看的。必须先要在本地建立一个服务器，输入</p>

<p><code>rake preview</code></p>

<p>提示一下，默认是选择4000端口的，如果你电脑的4000端口已经被占用，那么就会失败。在看到pid，port等信息后就表示成功。在浏览器上输入<code>localhost：4000</code>等待一段时间。</p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/rake_preview.png" alt="rake_preview" /></p>

<p><img src="http://7xwg81.com1.z0.glb.clouddn.com/firstblog.png" alt="firstblog" />
　　看到默认的网页My Octopress Blog就表示整个环境搭建成功。可能你会抱怨，为什么只是一个静态的网页要加载辣么长时间？下一篇将会讲解，并且说明octopress的配置以及如何生成一篇博客。</p>

<p>如果有错，或者有问题的欢迎在下方评论提出，谢谢。</p>

<hr />

<h5>下载安装包：<a href="http://pan.baidu.com/s/1pLH5Rtx">百度网盘</a>　　密码：knng</h5>
]]></content>
  </entry>
  
</feed>
